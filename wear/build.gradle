plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply plugin: 'com.google.gms.google-services'

apply from: "../base.gradle"

android {
    namespace 'au.com.shiftyjelly.pocketcasts.wear'

    defaultConfig {
        minSdk project.minSdkVersionWear
        applicationId project.applicationId
    }

    if (canSignRelease) {
        signingConfigs {
            release {
                storeFile = project.storeFile
                storePassword = project.storePassword
                keyAlias = project.keyAlias
                keyPassword = project.keyPassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'

            def gitLongVersion = "git -C ${rootDir} describe --tags --long --dirty".execute().text.trim()
            def (gitTag, versionBuild, gitHash, gitDirty) = gitLongVersion.tokenize('-')

            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_radioactive",
                    gitHash: gitHash + (gitDirty ? ("-" + gitDirty) : ""),
                    sentryDsn: ""
            ]
        }

        debugProd {
            initWith debug
        }

        release {
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    gitHash: "",
                    sentryDsn: project.pocketcastsSentryDsn
            ]

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (canSignRelease) {
                signingConfig signingConfigs.release
            }
        }
    }

    buildFeatures {
        compose true
    }

    kotlinOptions {
        jvmTarget = "1.8"
        // Allow for widescale experimental APIs in Alpha libraries we build upon
        freeCompilerArgs += "-opt-in=com.google.android.horologist.annotations.ExperimentalHorologistApi"
        freeCompilerArgs += "-opt-in=com.google.android.horologist.media.ui.ExperimentalHorologistMediaUiApi"
    }
}

dependencies {
    implementation libs.wear.input

    // General Compose dependencies
    implementation libs.activity.compose
    implementation libs.compose.ui
    implementation libs.material.icons.extended
    implementation libs.compose.ui.tooling.preview
    implementation libs.hilt.navigation.compose

    // Compose for Wear OS Dependencies
    implementation libs.wear.compose.material
    implementation libs.wear.compose.foundation
    implementation libs.wear.compose.navigation

    // Horologist Dependencies
    implementation libs.horologist.audio.ui
    implementation libs.horologist.auth.data
    implementation libs.horologist.auth.composables
    implementation libs.horologist.auth.ui
    implementation libs.horologist.base.ui
    implementation libs.horologist.datalayer
    implementation libs.horologist.media
    implementation libs.horologist.media3.backend
    implementation libs.horologist.media.data
    implementation libs.horologist.media.ui
    implementation libs.horologist.network.awareness.okhttp

    implementation libs.media3.datasource.okhttp

    implementation libs.horologist.compose.layout

    implementation project(':modules:services:analytics')
    implementation project(':modules:services:compose')
    implementation project(':modules:services:images')
    implementation project(':modules:services:localization')
    implementation project(':modules:services:model')
    implementation project(':modules:services:preferences')
    implementation project(':modules:services:repositories')
    implementation project(':modules:services:servers')
    implementation project(':modules:services:ui')
    implementation project(':modules:services:utils')

    implementation project(':modules:features:account')
    implementation project(':modules:features:podcasts')
    implementation project(':modules:features:profile')
    implementation project(':modules:features:settings')
}

task useGoogleServicesDebugFile {
    description 'Copies the debug google-services.json file if file is missing.'
    doLast {
        def googleServicesFile = "google-services.json"
        if (!file("${project.projectDir}/$googleServicesFile").exists()) {
            def debugOnlyFile = "google-services.json_debug-only"
            println "$googleServicesFile file is missing. Copying $debugOnlyFile"
            copy {
                from "${project.projectDir}/$debugOnlyFile"
                into project.projectDir
                rename { googleServicesFile }
            }
        }
    }
}
preBuild.dependsOn(useGoogleServicesDebugFile)
