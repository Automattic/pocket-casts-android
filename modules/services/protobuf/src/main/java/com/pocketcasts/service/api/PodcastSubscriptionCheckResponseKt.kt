// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.pocketcasts.service.api

@kotlin.jvm.JvmName("-initializepodcastSubscriptionCheckResponse")
public inline fun podcastSubscriptionCheckResponse(block: com.pocketcasts.service.api.PodcastSubscriptionCheckResponseKt.Dsl.() -> kotlin.Unit): com.pocketcasts.service.api.PodcastSubscriptionCheckResponse =
    com.pocketcasts.service.api.PodcastSubscriptionCheckResponseKt.Dsl._create(com.pocketcasts.service.api.PodcastSubscriptionCheckResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `api.PodcastSubscriptionCheckResponse`
 */
public object PodcastSubscriptionCheckResponseKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
        private val _builder: com.pocketcasts.service.api.PodcastSubscriptionCheckResponse.Builder
    ) {
        public companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: com.pocketcasts.service.api.PodcastSubscriptionCheckResponse.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): com.pocketcasts.service.api.PodcastSubscriptionCheckResponse = _builder.build()

        /**
         * <code>bool paid = 1;</code>
         */
        public var paid: kotlin.Boolean
            @JvmName("getPaid")
            get() = _builder.getPaid()
            @JvmName("setPaid")
            set(value) {
                _builder.setPaid(value)
            }
        /**
         * `bool paid = 1;`
         */
        public fun clearPaid() {
            _builder.clearPaid()
        }

        /**
         * <code>bool user_exists = 2;</code>
         */
        public var userExists: kotlin.Boolean
            @JvmName("getUserExists")
            get() = _builder.getUserExists()
            @JvmName("setUserExists")
            set(value) {
                _builder.setUserExists(value)
            }
        /**
         * `bool user_exists = 2;`
         */
        public fun clearUserExists() {
            _builder.clearUserExists()
        }
    }
}
public inline fun com.pocketcasts.service.api.PodcastSubscriptionCheckResponse.copy(block: com.pocketcasts.service.api.PodcastSubscriptionCheckResponseKt.Dsl.() -> kotlin.Unit): com.pocketcasts.service.api.PodcastSubscriptionCheckResponse =
    com.pocketcasts.service.api.PodcastSubscriptionCheckResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
