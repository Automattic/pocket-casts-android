// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.pocketcasts.service.api

@kotlin.jvm.JvmName("-initializeuserRevokeRequest")
public inline fun userRevokeRequest(block: com.pocketcasts.service.api.UserRevokeRequestKt.Dsl.() -> kotlin.Unit): com.pocketcasts.service.api.UserRevokeRequest =
    com.pocketcasts.service.api.UserRevokeRequestKt.Dsl._create(com.pocketcasts.service.api.UserRevokeRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `api.UserRevokeRequest`
 */
public object UserRevokeRequestKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
        private val _builder: com.pocketcasts.service.api.UserRevokeRequest.Builder
    ) {
        public companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: com.pocketcasts.service.api.UserRevokeRequest.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): com.pocketcasts.service.api.UserRevokeRequest = _builder.build()

        /**
         * `string refresh_token = 1;`
         */
        public var refreshToken: kotlin.String
            @JvmName("getRefreshToken")
            get() = _builder.getRefreshToken()
            @JvmName("setRefreshToken")
            set(value) {
                _builder.setRefreshToken(value)
            }
        /**
         * `string refresh_token = 1;`
         */
        public fun clearRefreshToken() {
            _builder.clearRefreshToken()
        }
    }
}
public inline fun com.pocketcasts.service.api.UserRevokeRequest.copy(block: com.pocketcasts.service.api.UserRevokeRequestKt.Dsl.() -> kotlin.Unit): com.pocketcasts.service.api.UserRevokeRequest =
    com.pocketcasts.service.api.UserRevokeRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
