# Upgrade Guide
# -------------
# 1. Check the Compose Compiler and Kotlin versions are compatible.
#    https://developer.android.com/jetpack/androidx/releases/compose-kotlin
#    compose-kotlin-compiler = Compose Compiler Version (can be found in composeOptions -> kotlinCompilerExtensionVersion)
#    kotlin = Kotlin Version
#
# 2. Check the Kotlin and KSP versions are compatible.
#    https://github.com/google/ksp/releases
#    kotlin = Kotlin Version
#    ksp = KSP (Kotlin Symbol Processing) Version
#
# 3. Check the Wear Compose and Horologist versions are compatible.
#    https://github.com/google/horologist/blob/main/gradle/libs.versions.toml
#    wear-compose = Wear Compose Version
#    horologist = Horologist Version

[versions]
aboutlibraries = "11.2.3"
android-gradle-plugin = "8.6.1"
billing = "7.0.0"
coil = "2.7.0"
compose = "2024.02.00" # https://developer.android.com/jetpack/compose/bom/bom-mapping
dependency-analysis = "2.0.2"
espresso = "3.6.1"
firebase = "30.5.0"
fragment = "1.8.2"
glance = "1.0.0"
google-services = "4.3.14"
hilt = "2.52"
hilt-compiler = "1.2.0"
horologist = "0.5.26"
java = "17"
kotlin = "2.0.20"
kotlin-coroutines = "1.9.0"
ksp = "2.0.20-1.0.24"
ktlint = "0.50.0"
lifecycle = "2.8.6"
lottie = "6.5.2"
media3 = "1.4.1"
mockito = "5.12.0"
mockito-kotlin = "5.4.0"
moshi = "1.15.1"
navigation = "2.7.7"
okhttp = "4.12.0"
protobuf = "4.28.2"
protobuf-plugin = "0.9.4"
retrofit = "2.11.0"
room = "2.6.1"
sentry-plugin = "4.11.0"
showkase = "1.0.3"
tasker-plugin = "0.4.10"
test = "1.6.1"
tracks = "5.1.2"
wear-compose = "1.3.1"
work = "2.9.1"

[libraries]
# About Libraries
aboutlibraries-compose = { module = "com.mikepenz:aboutlibraries-compose", version.ref = "aboutlibraries" }
aboutlibraries-core = { module = "com.mikepenz:aboutlibraries-core", version.ref = "aboutlibraries" }

# Billing
billing-ktx = { module = "com.android.billingclient:billing-ktx", version.ref = "billing" }

# Coil
coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coil-base = { module = "io.coil-kt:coil-base", version.ref = "coil" }
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }

# Compose
compose-activity = "androidx.activity:activity-compose:1.8.2"
compose-animation = { module = "androidx.compose.animation:animation" }
compose-bom = { module = "androidx.compose:compose-bom", version.ref = "compose" }
compose-constraintlayout = "androidx.constraintlayout:constraintlayout-compose:1.0.1"
compose-livedata = { module = "androidx.compose.runtime:runtime-livedata" }
compose-material = { module = "androidx.compose.material:material" }
compose-material-icons = { module = "androidx.compose.material:material-icons-extended" }
compose-material3 = { module = "androidx.compose.material3:material3" }
compose-material3-window-size = { module = "androidx.compose.material3:material3-window-size-class-android" }
compose-rxjava2 = { module = "androidx.compose.runtime:runtime-rxjava2" }
compose-ui = { module = "androidx.compose.ui:ui" }
compose-ui-graphics = { module = "androidx.compose.ui:ui-graphics" }
compose-ui-test-junit = { module = "androidx.compose.ui:ui-test-junit4" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }
compose-ui-util = { module = "androidx.compose.ui:ui-util" }

# Coroutines
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlin-coroutines" }
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlin-coroutines" }
coroutines-play-services = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-play-services", version.ref = "kotlin-coroutines" }
coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "kotlin-coroutines" }
coroutines-rx2 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-rx2", version.ref = "kotlin-coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin-coroutines" }

# Dagger / Hilt
dagger-hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
dagger-hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }
dagger-hilt-core = { module = "com.google.dagger:hilt-core", version.ref = "hilt" }
hilt-compiler = { module = "androidx.hilt:hilt-compiler", version.ref = "hilt-compiler" }
hilt-navigation-compose = "androidx.hilt:hilt-navigation-compose:1.2.0"
hilt-work = "androidx.hilt:hilt-work:1.2.0"

# Espresso
espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso" }
espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }

# Firebase
firebase-bom = { module = "com.google.firebase:firebase-bom", version.ref = "firebase" }
firebase-analytics-ktx = { module = "com.google.firebase:firebase-analytics-ktx" }
firebase-config-ktx = { module = "com.google.firebase:firebase-config-ktx" }

# Fragments
fragment-compose = { module = "androidx.fragment:fragment-compose", version.ref = "fragment" }
fragment-ktx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragment" }

# Glance
glance-appwidget = { module = "androidx.glance:glance-appwidget", version.ref = "glance" }
glance-material3 = { module = "androidx.glance:glance-material3", version.ref = "glance" }

# Google Play Services OSS Licenses - (The following line is still needed as there is no plugin marker available as of yet)
osslicenses-plugin = "com.google.android.gms:oss-licenses-plugin:0.10.6"

# Horologist
horologist-audio-ui = { module = "com.google.android.horologist:horologist-audio-ui", version.ref = "horologist" }
horologist-audio = { module = "com.google.android.horologist:horologist-audio", version.ref = "horologist" }
horologist-auth-composables = { module = "com.google.android.horologist:horologist-auth-composables", version.ref = "horologist" }
horologist-auth-data = { module = "com.google.android.horologist:horologist-auth-data", version.ref = "horologist" }
horologist-auth-data-phone = { module = "com.google.android.horologist:horologist-auth-data-phone", version.ref = "horologist" }
horologist-auth-ui = { module = "com.google.android.horologist:horologist-auth-ui", version.ref = "horologist" }
horologist-compose-layout = { module = "com.google.android.horologist:horologist-compose-layout", version.ref = "horologist" }
horologist-compose-material = { module = "com.google.android.horologist:horologist-compose-material", version.ref = "horologist" }
horologist-datalayer = { module = "com.google.android.horologist:horologist-datalayer", version.ref = "horologist" }
horologist-media = { module = "com.google.android.horologist:horologist-media", version.ref = "horologist" }
horologist-media-ui = { module = "com.google.android.horologist:horologist-media-ui", version.ref = "horologist" }
horologist-media3-outputswitcher = { module = "com.google.android.horologist:horologist-media3-outputswitcher", version.ref = "horologist" }
horologist-network-awarness-okhttp = { module = "com.google.android.horologist:horologist-network-awareness-okhttp", version.ref = "horologist" }

# Lifecycle
lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
lifecycle-process = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycle" }
lifecycle-reactivestreams-ktx = { module = "androidx.lifecycle:lifecycle-reactivestreams-ktx", version.ref = "lifecycle" }
lifecycle-runtime-compose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
lifecycle-runtime-testing = { module = "androidx.lifecycle:lifecycle-runtime-testing", version.ref = "lifecycle" }
lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }

# Lottie
lottie = { module = "com.airbnb.android:lottie", version.ref = "lottie" }
lottie-compose = { module = "com.airbnb.android:lottie-compose", version.ref = "lottie" }

# Media3
media3-cast = { module = "androidx.media3:media3-cast", version.ref = "media3" }
media3-common = { module = "androidx.media3:media3-common", version.ref = "media3" }
media3-datasource = { module = "androidx.media3:media3-datasource", version.ref = "media3" }
media3-datasource-okhttp = { module = "androidx.media3:media3-datasource-okhttp", version.ref = "media3" }
media3-exoplayer = { module = "androidx.media3:media3-exoplayer", version.ref = "media3" }
media3-exoplayer-hls = { module = "androidx.media3:media3-exoplayer-hls", version.ref = "media3" }
media3-extractor = { module = "androidx.media3:media3-extractor", version.ref = "media3" }
media3-ui = { module = "androidx.media3:media3-ui", version.ref = "media3" }

# Mockito
mockito-android = { module = "org.mockito:mockito-android", version.ref = "mockito" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }

# Moshi
moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" }
moshi-adapters = { module = "com.squareup.moshi:moshi-adapters", version.ref = "moshi" }
moshi-kotlin-codegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" }

# Navigation
navigation-runtime = { module = "androidx.navigation:navigation-runtime", version.ref = "navigation" }
navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation" }
navigation-fragment-ktx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
navigation-testing = { module = "androidx.navigation:navigation-testing", version.ref = "navigation" }
navigation-ui-ktx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }

# OkHttp
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okHttp-logging = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
okHttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

# Protobuf
# For Android users, it's recommended to use protobuf Java Lite runtime because of its smaller code size.
# Java Lite runtime also works better with Proguard because it doesn't rely on Java reflection and is optimized
# to allow as much code stripping as possible.
protobuf-kotlinlite = { module = "com.google.protobuf:protobuf-kotlin-lite", version.ref = "protobuf" }
protobuf-javalite = { module = "com.google.protobuf:protobuf-javalite", version.ref = "protobuf" }
protobuf-protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }

# Retrofit
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-moshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }
retrofit-protobuf = { module = "com.squareup.retrofit2:converter-protobuf", version.ref = "retrofit" }
retrofit-rx2 = { module = "com.squareup.retrofit2:adapter-rxjava2", version.ref = "retrofit" }

# Room
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
room = { module = "androidx.room:room-runtime", version.ref = "room" }
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
room-rx2 = { module = "androidx.room:room-rxjava2", version.ref = "room" }
room-testing = { module = "androidx.room:room-testing", version.ref = "room" }

# RxJava
rx2-android = "io.reactivex.rxjava2:rxandroid:2.1.1"
rx2-extensions = "com.github.akarnokd:rxjava2-extensions:0.20.10"
rx2-java = "io.reactivex.rxjava2:rxjava:2.2.21"
rx2-kotlin = "io.reactivex.rxjava2:rxkotlin:2.4.0"
rx2-relay = "com.jakewharton.rxrelay2:rxrelay:2.1.1"

# Showkase
showkase = { module = "com.airbnb.android:showkase", version.ref = "showkase" }
showkase-processor = { module = "com.airbnb.android:showkase-processor", version.ref = "showkase" }

# Tasker
tasker = { module = "com.joaomgcd:taskerpluginlibrary", version.ref = "tasker-plugin" }

# Test
androidx-test-core = { module = "androidx.test:core", version.ref = "test" }
androidx-test-junit-ext = "androidx.test.ext:junit:1.2.1"
androidx-test-rules = { module = "androidx.test:rules", version.ref = "test" }
androidx-test-runner = { module = "androidx.test:runner", version.ref = "test" }

# Tracks
automattic-crashlogging = { module = "com.automattic.tracks:crashlogging", version.ref = "tracks" }
automattic-tracks = { module = "com.automattic:Automattic-Tracks-Android", version.ref = "tracks" }

# Wear
wear-input = "androidx.wear:wear-input:1.2.0-alpha02"
wear-remote-interactions = "androidx.wear:wear-remote-interactions:1.0.0"
wear-tooling-preview = "androidx.wear:wear-tooling-preview:1.0.0"

# Wear Compose
wear-compose-foundation = { module = "androidx.wear.compose:compose-foundation", version.ref = "wear-compose" }
wear-compose-material = { module = "androidx.wear.compose:compose-material", version.ref = "wear-compose" }
wear-compose-navigation = { module = "androidx.wear.compose:compose-navigation", version.ref = "wear-compose" }

# Work Manager
work-runtime = { module = "androidx.work:work-runtime-ktx", version.ref = "work" }
work-rx2 = { module = "androidx.work:work-rxjava2", version.ref = "work" }
work-test = { module = "androidx.work:work-testing", version.ref = "work" }

# Other dependencies
androidx-annotation = "androidx.annotation:annotation:1.3.0"
androidx-appcompat = "androidx.appcompat:appcompat:1.7.0"
androidx-arch-core = "androidx.arch.core:core-testing:2.2.0"
androidx-car = "androidx.car.app:app:1.4.0"
androidx-cardview = "androidx.cardview:cardview:1.0.0"
androidx-constraintlayout = "androidx.constraintlayout:constraintlayout:2.1.4"
androidx-core-ktx = "androidx.core:core-ktx:1.10.1"
androidx-mediarouter = "androidx.mediarouter:mediarouter:1.7.0"
androidx-palette = "androidx.palette:palette:1.0.0"
androidx-preference-ktx = "androidx.preference:preference-ktx:1.2.1"
androidx-recyclerview = "androidx.recyclerview:recyclerview:1.3.0"
androidx-swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
androidx-uiautomator = "androidx.test.uiautomator:uiautomator:2.2.0"
androidx-viewpager = "androidx.viewpager2:viewpager2:1.1.0"
barista = "com.adevinta.android:barista:4.3.0"
capturable = "dev.shreyaspatil:capturable:2.1.0"
desugar-jdk = "com.android.tools:desugar_jdk_libs:2.1.2"
device-names = "com.jaredrummler:android-device-names:2.1.1"
encryptedlogging = "com.automattic:encryptedlogging:0.0.1"
engage = "com.google.android.engage:engage-core:1.5.5"
ffmpeg = "com.arthenica:ffmpeg-kit-full:6.0-2"
flexbox = "com.google.android.flexbox:flexbox:3.0.0"
guava = "com.google.guava:guava:33.3.0-android" # Required to fix conflict between versions in exoplayer and workmanager
jsonassert = "org.skyscreamer:jsonassert:1.5.3"
junit = "junit:junit:4.13.2"
leakcanary = "com.squareup.leakcanary:leakcanary-android:2.14"
material = "com.google.android.material:material:1.9.0"
material-dialogs = "com.afollestad.material-dialogs:core:3.3.0"
material-progressbar = "me.zhanghai.android.materialprogressbar:library:1.6.1"
play-auth = "com.google.android.gms:play-services-auth:20.4.0"
play-cast = "com.google.android.gms:play-services-cast-framework:21.4.0"
play-oss-licenses = "com.google.android.gms:play-services-oss-licenses:17.0.0"
play-review = "com.google.android.play:review-ktx:2.0.1"
play-wearable = "com.google.android.gms:play-services-wearable:18.0.0"
reorderable = "sh.calvin.reorderable:reorderable:2.3.3"
timber = "com.jakewharton.timber:timber:5.0.1"
turbine = "app.cash.turbine:turbine:1.1.0"

[plugins]
aboutlibraries = { id = "com.mikepenz.aboutlibraries.plugin", version.ref = "aboutlibraries" }
android-application = { id = "com.android.application", version.ref = "android-gradle-plugin" }
android-library = { id = "com.android.library", version.ref = "android-gradle-plugin" }
dependency-analysis = { id = "com.autonomousapps.dependency-analysis", version.ref = "dependency-analysis" }
google-services = { id = "com.google.gms.google-services", version.ref = "google-services" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
measure-builds = "com.automattic.android.measure-builds:3.0.0"
protobuf = { id = "com.google.protobuf", version.ref = "protobuf-plugin" }
sentry = { id = "io.sentry.android.gradle", version.ref = "sentry-plugin" }
spotless = "com.diffplug.spotless:6.25.0"
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
