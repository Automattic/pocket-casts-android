plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'io.sentry.android.gradle'
    id 'com.mikepenz.aboutlibraries.plugin'
}
apply from: "../base.gradle"

android {
    namespace 'au.com.shiftyjelly.pocketcasts'

    defaultConfig {
        applicationId project.applicationId
        minSdkVersion 28
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'

            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_radioactive",
                    sentryDsn: ""
            ]
        }

        debugProd {
            initWith debug
            debuggable true
        }

        release {
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    gitHash: "",
                    sentryDsn: project.pocketcastsSentryDsn
            ]

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Commented out the Automotive library as it clashes with the Material library and we don't use it. Duplicate value for resource attr/navigationIconTint.
    //implementation 'androidx.car:car:1.0.0-alpha7'
    implementation libs.appcompat
    implementation libs.core.ktx
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.aboutlibraries
    implementation libs.aboutlibraries.compose
    testImplementation libs.junit
    androidTestImplementation libs.junit.ext
    androidTestImplementation libs.espresso.core

    implementation project(':modules:services:localization')
    implementation project(':modules:services:preferences')
    implementation project(':modules:services:utils')
    implementation project(':modules:services:model')
    implementation project(':modules:services:ui')
    implementation project(':modules:services:views')
    implementation project(':modules:services:compose')
    implementation project(':modules:services:repositories')
    implementation project(':modules:services:servers')
    implementation project(':modules:services:analytics')
    implementation project(':modules:features:profile')
    implementation project(':modules:features:podcasts')
    implementation project(':modules:features:settings')
    implementation project(':modules:features:discover')
    implementation project(':modules:features:account')
}

apply plugin: 'com.google.gms.google-services'

task useGoogleServicesDebugFile {
    description 'Copies the debug google-services.json file if file is missing.'
    doLast {
        def googleServicesFile = "google-services.json"
        if (!file("${project.projectDir}/$googleServicesFile").exists()) {
            def debugOnlyFile = "google-services.json_debug-only"
            println "$googleServicesFile file is missing. Copying $debugOnlyFile"
            copy {
                from "${project.projectDir}/$debugOnlyFile"
                into project.projectDir
                rename { googleServicesFile }
            }
        }
    }
}
preBuild.dependsOn(useGoogleServicesDebugFile)
