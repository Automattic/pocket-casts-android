// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    // Gradle Plugins
    dependencies {
        // Open source licenses plugin
        classpath libs.ossLicenses.plugin
        // Hilt dependency injection - This hasn't been moved to the plugins section as it isn't working with WorkManager "NoSuchMethodException: <init> [class android.content.Context, class androidx.work.WorkerParameters]"
        classpath libs.hilt.android.plugin
    }

    // Force proguard to the new version to fix "proguard.ParseException: Use of generics not allowed for java type at '<1>_<2>_<3>JsonAdapter' in line 31 of file '/Users/philip/.gradle/caches/transforms-2/files-2.1/d5ca2d039e1d32e9ba6bfd6a67df5151/META-INF/proguard/moshi.pro'"
    configurations.all {
        resolutionStrategy {
            force 'net.sf.proguard:proguard-gradle:6.1.1'
        }
    }
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.kotlin.android apply false
    alias libs.plugins.kapt apply false
    alias libs.plugins.ksp apply false
    alias libs.plugins.google.services apply false
    alias libs.plugins.aboutlibraries apply false
    alias libs.plugins.ben.manes.versions
    alias libs.plugins.spotless
    alias libs.plugins.sentry apply false
}

apply plugin: 'base'
apply from: rootProject.file('dependencies.gradle')
apply from: 'scripts/git-hooks/install.gradle'

apply plugin: 'com.diffplug.spotless'
spotless {
    kotlin {
        target '**/*.kt'
        targetExclude("$buildDir/**/*.kt")
        targetExclude('bin/**/*.kt')
        ktlint('0.45.1')
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
