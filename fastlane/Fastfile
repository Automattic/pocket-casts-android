default_platform(:android)
fastlane_require 'dotenv'

unless FastlaneCore::Helper.bundler?
  UI.user_error!('Please run fastlane via `bundle exec`')
end

before_all do |lane|
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end

########################################################################
# Constants
########################################################################
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
APP_PACKAGE_NAME = 'au.com.shiftyjelly.pocketcasts'
GOOGLE_FIREBASE_SECRETS_PATH = File.join(PROJECT_ROOT_FOLDER, '.configure-files', 'firebase.secrets.json')

########################################################################
# Environment
########################################################################
Dotenv.load('~/.wcandroid-env.default')
ENV[GHHELPER_REPO = "automattic/pocket-casts-android"]
ENV["PROJECT_NAME"] = "pocket-casts-android"
ENV["PROJECT_ROOT_FOLDER"] = "./"
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'main'
REPOSITORY_NAME = "pocket-casts-android"
GH_ORG_NAME = "automattic"

google-upload-credentials.json
UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(Dir.home, '.configure', 'pocket', 'secrets', 'google-upload-credentials.json')

platform :android do
  ########################################################################
  # Release Lanes
  ########################################################################

  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze codefreeze_version:<version> [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current trunk"
  lane :code_freeze do | options |
    android_codefreeze_prechecks(options)

    android_bump_version_release()
    new_version = android_get_app_version()

    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the last steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current trunk"
  lane :complete_code_freeze do | options |
    android_completecodefreeze_prechecks(options)

    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do | options |
    android_betabuild_prechecks(options)
    android_bump_version_beta()
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version_name:<x.y.z>] [version_code:<nnnn>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version_name:10.6.1 version_code:1070
  #####################################################################################
  desc "Prepare a new hotfix branch cut from the previous tag, and bump the version"
  lane :new_hotfix_release do |options|
    hotfix_version = options[:version_name] || UI.input('Version number for the new hotfix?')
    previous_tag = android_hotfix_prechecks(version_name: hotfix_version, skip_confirm: options[:skip_confirm])
    android_bump_version_hotfix(previous_version_name: previous_tag, version_name: hotfix_version, version_code: options[:version_code])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release
  desc "Finalizes a hotfix release by triggering a release build"
  lane :finalize_hotfix_release do |options|
    new_version = android_get_app_version()
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc "Updates store metadata and runs the release checks"
  lane :finalize_release do | options |
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix

    android_finalize_prechecks(options)
    configure_apply(force: is_ci)

    android_bump_version_final_release()

    version = android_get_release_version()
    download_metadata_strings(version: version["name"], build_number: version["code"])

    # Wrap up
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version["name"]}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version["name"], freeze: false)
    create_new_milestone(repository:GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: version["name"])

    trigger_release_build(branch_to_build: "release/#{version["name"]}")
  end

  #####################################################################################
  # build_and_upload_google_play
  # -----------------------------------------------------------------------------------
  # This lane builds the app for Google Play, and will correctly select which build
  # should be produced based on the build number.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_google_play
  #
  # Example:
  # bundle exec fastlane build_and_upload_google_play
  #####################################################################################
  desc "Builds and uploads a release to Google Play"
  lane :build_and_upload_google_play do | options |
    if is_beta_version(android_get_release_version)
      build_and_upload_beta(
        skip_confirm: is_ci,
        skip_prechecks: true,
        create_release: true
      )
    else
      build_and_upload_release(
        skip_confirm: is_ci,
        skip_prechecks: true,
        create_release: true
      )
    end
  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release
  # bundle exec fastlane build_and_upload_release skip_confirm:true
  # bundle exec fastlane build_and_upload_release create_release:true
  #####################################################################################
  desc "Builds and uploads release for distribution"
  lane :build_and_upload_release do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm],
                            alpha: false,
                            beta: false,
                            final: true)
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    version = android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    aab_file_path = File.join(PROJECT_ROOT_FOLDER, "artifacts", aab_file_name(version))

    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: APP_PACKAGE_NAME,
      aab: aab_file_path,
      track: 'production',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )

    create_gh_release(version: version) if options[:create_release]
  end

  #####################################################################################
  # build_and_upload_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app for external beta distribution, and uploads the build
  # to the beta channel (but does not release it).
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_beta [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_beta
  # bundle exec fastlane build_and_upload_beta skip_confirm:true
  # bundle exec fastlane build_and_upload_beta create_release:true
  #####################################################################################
  desc "Builds and uploads a new beta build to Google Play (without releasing it)"
  lane :build_and_upload_beta do | options |
    android_build_prechecks(skip_confirm: options[:skip_confirm], alpha: false, beta: true, final: false) unless (options[:skip_prechecks])
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    version = android_get_release_version()
    build_bundle(version: version, flavor:"Vanilla")

    aab_file_path = File.join(PROJECT_ROOT_FOLDER, "artifacts", aab_file_name(version))
    UI.error("Unable to find a build artifact at #{aab_file_path}") unless File.exist? aab_file_path

    upload_to_play_store(
      package_name: APP_PACKAGE_NAME,
      aab: aab_file_path,
      track: 'beta',
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )

    create_gh_release(version: version, prerelease: true) if options[:create_release]
  end

  #####################################################################################
  # trigger_release_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a stable release build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_release_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  desc "Tell Buildkite to trigger a release build"
  lane :trigger_release_build do | options |
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'pocket-casts-android',
      branch: options[:branch_to_build] || git_branch,
      pipeline_file: 'release-builds.yml'
    )
  end

  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle [skip_confirm:<skip confirm>]
  #####################################################################################
  desc "Builds an app bundle"
  lane :build_bundle do | options |
    # Create the file names
    version = options[:version]
    name = aab_file_name(version)
    aab_file = "app-vanilla-release.aab"
    output_dir = "app/build/outputs/bundle/"
    build_dir = "artifacts/"

    # Build
    Dir.chdir(".") do
      UI.message("Cleaning branch...")
      gradle(task: "clean")
      UI.message("Running lint...")
      gradle(task: "lint", flavor: options[:flavor], build_type: "Release")
      UI.message("Building #{version["name"]} / #{version["code"]} - #{aab_file}...")
      gradle(task: "bundle", flavor: options[:flavor], build_type: "Release")
    end

    Dir.chdir("..") do
      sh("mkdir -p #{build_dir} && cp -v #{output_dir}#{options[:flavor].downcase}Release/#{aab_file} #{build_dir}#{name}")
      UI.message("Bundle ready: #{name}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
  # build_and_instrumented_test
  # -----------------------------------------------------------------------------------
  # Run instrumented tests in Google Firebase Test Lab
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_instrumented_test
  #
  #####################################################################################
  desc "Build the application and instrumented tests, then run the tests in Firebase Test Lab"
  lane :build_and_instrumented_test do | options |
    gradle(tasks: ['assembleVanillaDebug', 'assembleVanillaDebugAndroidTest'])

    # Run the instrumented tests in Firebase Test Lab
    firebase_login(
      key_file: GOOGLE_FIREBASE_SECRETS_PATH
    )

    apk_dir = File.join(PROJECT_ROOT_FOLDER, 'app', 'build', 'outputs', 'apk')

    android_firebase_test(
      project_id: firebase_secret(name: 'project_id'),
      key_file: GOOGLE_FIREBASE_SECRETS_PATH,
      model: 'Nexus5',
      version: 23,
      test_apk_path: File.join(apk_dir, 'androidTest', 'vanilla', 'debug', 'app-vanilla-debug-androidTest.apk'),
      apk_path: File.join(apk_dir, 'vanilla', 'debug', 'app-vanilla-debug.apk'),
      results_output_dir: File.join(PROJECT_ROOT_FOLDER, 'build', 'instrumented-tests')
     )
  end

  #####################################################################################
  # Private lanes
  #####################################################################################

  # Creates a new GitHub Release for the given version
  #
  # @param [Hash<String>] version The version to create. Expects keys "name" and "code"
  # @param [Bool] prerelease If true, the GitHub Release will have the prerelease flag
  #
  private_lane :create_gh_release do | options |
    version = options[:version]
    prerelease = options[:prerelease] || false

    # APKs built on CI are not signed with master key, which means Google Sign-In won't work with those.
    # So don't attach them to the release, as this ends up being confusing for beta-testers.
    apk_file_path = File.join(PROJECT_ROOT_FOLDER, 'artifacts', universal_apk_name(version)) unless is_ci
    aab_file_path = File.join(PROJECT_ROOT_FOLDER, 'artifacts', aab_file_name(version))
    release_assets = [apk_file_path, aab_file_path].compact

    create_release(
      repository: GHHELPER_REPO,
      version: version["name"],
      release_notes_file_path: RELEASE_NOTES_PATH,
      prerelease: prerelease,
      release_assets: release_assets.join(',')
    )
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def aab_file_name(version)
    "wcandroid-#{version["name"]}.aab"
  end

  def universal_apk_name(version)
    "wcandroid-#{version["name"]}-universal.apk"
  end

  def is_beta_version(version)
    version['name'].include? "-rc-"
  end

  def firebase_secret(name:)
     UI.user_error!('Unable to locale Firebase Secrets File – did you run `configure apply`?') unless File.file? GOOGLE_FIREBASE_SECRETS_PATH
     key_file_secrets = JSON.parse(File.read(GOOGLE_FIREBASE_SECRETS_PATH))
     UI.user_error!("Unable to find key `#{name}` in #{GOOGLE_FIREBASE_SECRETS_PATH}") if key_file_secrets[name].nil?
     key_file_secrets[name]
   end
end
