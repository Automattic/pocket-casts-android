# frozen_string_literal: true

default_platform(:android)
fastlane_require 'dotenv'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

########################################################################
# Constants
########################################################################
ENV_FILE_NAME = '.pocketcastsandroid-env.default'
USER_ENV_FILE_PATH = File.join(Dir.home, ENV_FILE_NAME)
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
APP_PACKAGE_NAME = 'au.com.shiftyjelly.pocketcasts'
GOOGLE_FIREBASE_SECRETS_PATH = File.join(PROJECT_ROOT_FOLDER, '.configure-files', 'firebase.secrets.json')
ORIGINALS_METADATA_DIR_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata')
RELEASE_NOTES_SOURCE_PATH = File.join(PROJECT_ROOT_FOLDER, 'CHANGELOG.md')
EXTRACTED_RELEASE_NOTES_PATH = File.join(ORIGINALS_METADATA_DIR_PATH, 'release_notes.txt')
PLAY_STORE_TRACK_AUTOMOTIVE_BETA = 'automotive:beta'
PLAY_STORE_TRACK_AUTOMOTIVE_PRODUCTION = 'automotive:production'
PLAY_STORE_TRACK_WEAR_BETA = 'wear:beta'
PLAY_STORE_TRACK_WEAR_PRODUCTION = 'wear:production'
PLAY_STORE_TRACK_BETA = 'beta'
PLAY_STORE_TRACK_PRODUCTION = 'production'
GLOTPRESS_APP_STRINGS_PROJECT_URL = 'https://translate.wordpress.com/projects/pocket-casts/android/'
VERSION_PROPERTIES_PATH = File.join(PROJECT_ROOT_FOLDER, 'version.properties')

# Instantiate versioning classes
VERSION_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SemanticVersionCalculator.new
VERSION_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::RCNotationVersionFormatter.new
BUILD_CODE_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeCalculator.new
BUILD_CODE_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeFormatter.new
VERSION_FILE = Fastlane::Wpmreleasetoolkit::Versioning::AndroidVersionFile.new(version_properties_path: VERSION_PROPERTIES_PATH)

SUPPORTED_LOCALES = [
  { glotpress: 'ar', android: 'ar', google_play: 'ar', promo_config: {} },
  { glotpress: 'de', android: 'de', google_play: 'de-DE',  promo_config: {} },
  { glotpress: 'es', android: 'es', google_play: 'es-ES',  promo_config: {} },
  { glotpress: 'es', android: 'es-rMX', google_play: 'es-MX', promo_config: {} },
  { glotpress: 'en-gb', android: 'en-rGB', google_play: 'en-GB', promo_config: {} },
  { glotpress: 'fr', android: 'fr', google_play: 'fr-FR', promo_config: {} },
  { glotpress: 'fr', android: 'fr-rCA', google_play: 'fr-CA', promo_config: {} },
  { glotpress: 'it', android: 'it', google_play: 'it-IT',  promo_config: {} },
  { glotpress: 'ja', android: 'ja', google_play: 'ja-JP',  promo_config: {} },
  { glotpress: 'ko', android: 'ko', google_play: 'ko-KR',  promo_config: {} },
  { glotpress: 'nl', android: 'nl', google_play: 'nl-NL',  promo_config: {} },
  { glotpress: 'nb', android: 'nb', google_play: 'nb-NB',  promo_config: {} },
  { glotpress: 'pt-br', android: 'pt-rBR', google_play: 'pt-BR', promo_config: {} },
  { glotpress: 'ru', android: 'ru', google_play: 'ru-RU',  promo_config: {} },
  { glotpress: 'sv', android: 'sv', google_play: 'sv-SE',  promo_config: {} },
  { glotpress: 'zh-cn', android: 'zh', google_play: 'zh-CN', promo_config: {} },
  { glotpress: 'zh-tw', android: 'zh-rTW', google_play: 'zh-TW', promo_config: {} }
].freeze

########################################################################
# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
DEFAULT_BRANCH = 'main'
ENV['SUPPLY_UPLOAD_MAX_RETRIES'] = '5'
GH_REPOSITORY = 'automattic/pocket-casts-android'
APPS_APP = 'app'
APPS_AUTOMOTIVE = 'automotive'
APPS_WEAR = 'wear'
APPS = [APPS_APP, APPS_AUTOMOTIVE, APPS_WEAR].freeze

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(PROJECT_ROOT_FOLDER, 'google-upload-credentials.json')

before_all do |_lane|
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    example_path = File.join(PROJECT_ROOT_FOLDER, 'fastlane/env/user.env-example')
    UI.user_error!("#{ENV_FILE_NAME} not found: Please copy '#{example_path}' to '#{USER_ENV_FILE_PATH}' and fill in the values.")
  end
end

platform :android do
  lane :code_freeze do |options|
    ensure_git_status_clean
    Fastlane::Helper::GitHelper.checkout_and_pull(DEFAULT_BRANCH)
    ensure_git_branch(branch: DEFAULT_BRANCH)

    confirmation_message = <<-MESSAGE

      Code Freeze:
      • New release branch from #{DEFAULT_BRANCH}: release/#{release_version_next}
      • Current release version and build code: #{release_version_current} (#{build_code_current}).
      • New release version and build code: #{beta_version_code_freeze} (#{build_code_next}).

    MESSAGE

    UI.important(confirmation_message)
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    # Create the release branch
    UI.message('Creating release branch...')
    Fastlane::Helper::GitHelper.create_branch("release/#{release_version_next}", from: DEFAULT_BRANCH)
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    UI.success("Done! New release branch is: #{git_branch}")

    # Bump the version and build code
    UI.message('Bumping beta version and build code...')
    VERSION_FILE.write_version(
      version_name: beta_version_code_freeze,
      version_code: build_code_next
    )
    commit_version_bump
    UI.success("Done! New Beta Version: #{beta_version_current}. New Build Code: #{build_code_current}")

    new_version = release_version_current

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: RELEASE_NOTES_SOURCE_PATH,
      extracted_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH
    )
    android_update_release_notes(
      new_version: new_version,
      release_notes_file_path: RELEASE_NOTES_SOURCE_PATH
    )
    push_to_git_remote(tags: false)
    setbranchprotection(repository: GH_REPOSITORY, branch: "release/#{new_version}")
    setfrozentag(repository: GH_REPOSITORY, milestone: new_version)
  end

  lane :complete_code_freeze do |options|
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    ensure_git_status_clean

    new_version = release_version_current

    UI.important("Completing code freeze for: #{new_version}")
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  lane :new_beta_release do |options|
    ensure_git_status_clean
    Fastlane::Helper::GitHelper.checkout_and_pull(DEFAULT_BRANCH)

    # Check versions
    message = <<-MESSAGE

      Current beta version: #{beta_version_current}
      New beta version: #{beta_version_next}

      Current build code: #{build_code_current}
      New build code: #{build_code_next}

    MESSAGE

    # Check branch
    unless !options[:base_version].nil? || Fastlane::Helper::GitHelper.checkout_and_pull(release: release_version_current)
      UI.user_error!("Release branch for version #{release_version_current} doesn't exist.")
    end

    # Check user override
    override_default_release_branch(options[:base_version]) unless options[:base_version].nil?

    UI.important(message)
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    # Bump the release version and build code
    UI.message('Bumping beta version and build code...')
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    VERSION_FILE.write_version(
      version_name: beta_version_next,
      version_code: build_code_next
    )
    commit_version_bump
    UI.success("Done! New Beta Version: #{beta_version_current}. New Build Code: #{build_code_current}")

    push_to_git_remote(tags: false)

    trigger_release_build(branch_to_build: "release/#{release_version_current}")
  end

  # Sets the stage to start working on a hotfix
  #
  # - Cuts a new `release/x.y.z` branch from the tag from the latest (`x.y`) version
  # - Bumps the app version numbers appropriately
  #
  # @option [Boolean] skip_confirm (default: false) If true, avoids any interactive prompt
  # @option [String] version_name (required) The version name to use for the hotfix (`"x.y.z"`)
  # @option [String] version_code (required) The version code to use for the hotfix (`"x.y.z"`)
  #
  # Note that the version_code needs to be higher than any of the existing version_codes in Play Store
  lane :new_hotfix_release do |options|
    new_version = options[:version_name] || UI.input('Version number for the new hotfix?')
    new_version_code = options[:version_code] || UI.input('Version code for the new hotfix?')

    ensure_git_status_clean

    # Parse the provided version into an AppVersion object
    parsed_version = VERSION_FORMATTER.parse(new_version)
    previous_version = VERSION_FORMATTER.release_version(VERSION_CALCULATOR.previous_patch_version(version: parsed_version))

    # Check versions
    message = <<-MESSAGE

      New hotfix version: #{new_version}

      Current build code: #{build_code_current}
      New build code: #{new_version_code}

      Branching from tag: #{previous_version}

    MESSAGE

    UI.important(message)
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    # Check tags
    UI.user_error!("The version `#{new_version}` tag already exists!") if git_tag_exists(tag: new_version)
    UI.user_error!("Version #{previous_version} is not tagged! A hotfix branch cannot be created.") unless git_tag_exists(tag: previous_version)

    # Create the hotfix branch
    UI.message('Creating hotfix branch...')
    Fastlane::Helper::GitHelper.create_branch("release/#{new_version}", from: previous_version)
    UI.success("Done! New hotfix branch is: #{git_branch}")

    # Bump the hotfix version and build code and write it to the `version.properties` file
    UI.message('Bumping hotfix version and build code...')
    VERSION_FILE.write_version(
      version_name: new_version,
      version_code: new_version_code
    )
    commit_version_bump
    UI.success("Done! New Release Version: #{release_version_current}. New Build Code: #{build_code_current}")
  end

  lane :finalize_hotfix_release do |options|
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    ensure_git_status_clean

    UI.important("Triggering hotfix build for version: #{release_version_current}")
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    trigger_release_build(branch_to_build: "release/#{release_version_current}")
  end

  # @param [String] branch_to_build (default: current git branch) The branch to build
  lane :trigger_release_build do |options|
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'pocket-casts-android',
      branch: options[:branch_to_build] || git_branch,
      pipeline_file: 'release-builds.yml'
    )
  end

  # - Uses the current version to decide if this is a beta or production build
  # - Builds the apps for external distribution
  # - Uploads the builds to 'beta' or 'production' Play Store channel (but does not release it)
  # - Creates draft Github release
  #
  # @option [Boolean] skip_confirm (default: false) If true, avoids any interactive prompt
  # @option [Boolean] skip_prechecks (default: false) If true, skips android_build_preflight
  # @option [Boolean] create_gh_release (default: false) If true, creates a draft GitHub release
  #
  desc 'Builds and uploads a new build to Google Play (without releasing it)'
  lane :build_and_upload_to_play_store do |options|
    version = version_name_current
    build_code = build_code_current
    is_beta = beta_version?(version)
    unless options[:skip_prechecks]
      # Match branch names that begin with `release/`
      ensure_git_branch(branch: '^release/') unless is_ci

      UI.important("Building version #{version_name_current} (#{build_code_current}) for upload to Google Play Console")
      unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
        UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
      end

      # Check local repo status
      ensure_git_status_clean unless is_ci

      android_build_preflight
    end

    release_assets = []

    APPS.each do |app|
      build_bundle(app: app, version: version, build_code: build_code)

      aab_artifact_path = aab_artifact_path(app, version)
      UI.error("Unable to find a build artifact at #{aab_artifact_path}") unless File.exist? aab_artifact_path

      track = case app
              when APPS_AUTOMOTIVE
                is_beta ? PLAY_STORE_TRACK_AUTOMOTIVE_BETA : PLAY_STORE_TRACK_AUTOMOTIVE_PRODUCTION
              when APPS_WEAR
                is_beta ? PLAY_STORE_TRACK_WEAR_BETA : PLAY_STORE_TRACK_WEAR_PRODUCTION
              else
                is_beta ? PLAY_STORE_TRACK_BETA : PLAY_STORE_TRACK_PRODUCTION
              end

      upload_to_play_store(
        package_name: APP_PACKAGE_NAME,
        aab: aab_artifact_path,
        track: track,
        release_status: 'draft',
        skip_upload_apk: true,
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
      )

      release_assets << aab_artifact_path
    end

    create_gh_release(version: version, prerelease: is_beta, release_assets: release_assets.compact) if options[:create_gh_release]
  end

  lane :finalize_release do |options|
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if release_is_hotfix?
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    ensure_git_status_clean

    UI.important("Finalizing release: #{release_version_current}")
    unless options[:skip_confirm] || UI.confirm('Do you want to continue?')
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.")
    end

    configure_apply(force: is_ci)

    # Bump the release version and build code
    UI.message('Bumping final release version and build code...')
    VERSION_FILE.write_version(
      version_name: release_version_current,
      version_code: build_code_next
    )
    commit_version_bump
    UI.success("Done! New Release Version: #{release_version_current}. New Build Code: #{build_code_current}")

    # Download Localizations
    android_download_translations(
      res_dir: File.join('modules', 'services', 'localization', 'src', 'main', 'res'),
      glotpress_url: GLOTPRESS_APP_STRINGS_PROJECT_URL,
      locales: SUPPORTED_LOCALES,
      lint_task: 'lintRelease'
    )

    version = release_version_current

    # Wrap up
    removebranchprotection(repository: GH_REPOSITORY, branch: "release/#{version}")
    setfrozentag(repository: GH_REPOSITORY, milestone: version, freeze: false)
    create_new_milestone(repository: GH_REPOSITORY, need_appstore_submission: true)
    close_milestone(repository: GH_REPOSITORY, milestone: version)

    push_to_git_remote(tags: false)
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  # @param [String] version The version to create
  # @param [String] build_code The build code to create
  # @param [String] app The Android app to build (i.e 'app', 'automotive', or 'wear')
  desc 'Builds and bundles the given app'
  lane :build_bundle do |options|
    version = options[:version]
    build_code = options[:build_code]
    app = options[:app]
    aab_artifact_path = aab_artifact_path(app, version)
    build_dir = 'artifacts/'

    gradle(task: 'clean')
    UI.message('Running lint...')
    gradle(task: ":#{app}:lintRelease")
    UI.message("Building #{version} / #{build_code} - #{aab_artifact_path}...")
    gradle(
      task: ":#{app}:bundle",
      build_type: 'Release',
      properties: {
        'IS_AUTOMOTIVE_BUILD' => app == APPS_AUTOMOTIVE,
        'IS_WEAR_BUILD' => app == APPS_WEAR
      }
    )

    Dir.chdir('..') do
      sh("mkdir -p #{build_dir} && cp -v #{bundle_output_path(app)} #{aab_artifact_path}")
      UI.message("Bundle ready: #{aab_artifact_path}")
    end
  end

  # Run instrumented tests in Google Firebase Test Lab
  desc 'Build the application and instrumented tests, then run the tests in Firebase Test Lab'
  lane :build_and_instrumented_test do |_options|
    gradle(tasks: %w[assembleDebug assembleDebugAndroidTest])

    # Run the instrumented tests in Firebase Test Lab
    firebase_login(
      key_file: GOOGLE_FIREBASE_SECRETS_PATH
    )

    apk_dir = File.join(PROJECT_ROOT_FOLDER, 'app', 'build', 'outputs', 'apk')

    android_firebase_test(
      project_id: firebase_secret(name: 'project_id'),
      key_file: GOOGLE_FIREBASE_SECRETS_PATH,
      model: 'Nexus5',
      version: 23,
      test_apk_path: File.join(apk_dir, 'androidTest', 'debug', 'app-debug-androidTest.apk'),
      apk_path: File.join(apk_dir, 'debug', 'app-debug.apk'),
      results_output_dir: File.join(PROJECT_ROOT_FOLDER, 'build', 'instrumented-tests')
    )
  end

  #####################################################################################
  # Private lanes
  #####################################################################################

  # Creates a new GitHub Release for the given version
  #
  # @param [Hash<String>] version The version to create. Expects keys "name" and "code"
  # @param [Bool] prerelease If true, the GitHub Release will have the prerelease flag
  #
  private_lane :create_gh_release do |options|
    version = options[:version]
    prerelease = options[:prerelease] || false
    release_assets = options[:release_assets]

    create_release(
      repository: GH_REPOSITORY,
      version: version,
      release_notes_file_path: nil,
      prerelease: prerelease,
      release_assets: release_assets.join(',')
    )
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def aab_artifact_path(app, version)
    File.join(PROJECT_ROOT_FOLDER, 'artifacts', "#{app}-#{version}.aab")
  end

  def bundle_output_path(app)
    "#{app}/build/outputs/bundle/release/#{app}-release.aab"
  end

  def firebase_secret(name:)
    UI.user_error!('Unable to locale Firebase Secrets File – did you run `bundle exec fastlane run configure_apply`?') unless File.file? GOOGLE_FIREBASE_SECRETS_PATH
    key_file_secrets = JSON.parse(File.read(GOOGLE_FIREBASE_SECRETS_PATH))
    UI.user_error!("Unable to find key `#{name}` in #{GOOGLE_FIREBASE_SECRETS_PATH}") if key_file_secrets[name].nil?
    key_file_secrets[name]
  end

  def beta_version?(version)
    version.include? '-rc-'
  end

  def override_default_release_branch(version)
    success = Fastlane::Helper::GitHelper.checkout_and_pull(release: version)
    UI.user_error!("Release branch for version #{version} doesn't exist. Abort.") unless success

    UI.message("Checked out branch `#{git_branch}` as requested by user.\n")
  end

  #####################################################################################
  # Version Methods
  #####################################################################################

  def release_is_hotfix?
    # Read the current release version from the .xcconfig file and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate and return whether the release version is a hotfix
    VERSION_CALCULATOR.release_is_hotfix?(version: current_version)
  end

  def commit_version_bump
    Fastlane::Helper::GitHelper.commit(
      message: 'Bump version number',
      files: VERSION_PROPERTIES_PATH
    )
  end

  # Returns the current version name from `version.properties` without needing formatting or calculations
  def version_name_current
    VERSION_FILE.read_version_name
  end

  # Returns the release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
  #
  def release_version_current
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Return the formatted release version
    VERSION_FORMATTER.release_version(current_version)
  end

  #  Returns the next release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
  #
  def release_version_next
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next release version
    release_version_next = VERSION_CALCULATOR.next_release_version(version: current_version)
    # Return the formatted release version
    VERSION_FORMATTER.release_version(release_version_next)
  end

  # Returns the beta version of the app in the format `1.2-rc-1`
  #
  def beta_version_current
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(current_version)
  end

  # Returns the beta version that is used by the code freeze
  # It first increments the minor number, which also resets the build number to 0
  # It then bumps the build number so the -rc-1 can be appended to the code freeze version
  def beta_version_code_freeze
    # Read the current release version from the version.properties file and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next major version number
    next_version = VERSION_CALCULATOR.next_release_version(version: current_version)
    # Calculate the next build number
    beta_version_code_freeze = VERSION_CALCULATOR.next_build_number(version: next_version)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(beta_version_code_freeze)
  end

  # Returns the beta version of the app in the format `1.2-rc-1`
  #
  def beta_version_next
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next beta version
    beta_version_next = VERSION_CALCULATOR.next_build_number(version: current_version)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(beta_version_next)
  end

  # Returns the current build code of the app
  #
  def build_code_current
    # Read the current build code from `version.properties` into to a BuildCode object
    build_code_current = VERSION_FILE.read_version_code
    # Return the formatted build code
    BUILD_CODE_FORMATTER.build_code(build_code: build_code_current)
  end

  # Returns the next build code of the app
  #
  def build_code_next
    # Read the current build code from `version.properties` into to a BuildCode object
    build_code_current = VERSION_FILE.read_version_code
    # Calculate the next build code
    build_code_next = BUILD_CODE_CALCULATOR.next_build_code(build_code: build_code_current)
    # Return the formatted build code
    BUILD_CODE_FORMATTER.build_code(build_code: build_code_next)
  end
end
