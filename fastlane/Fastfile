# frozen_string_literal: true

default_platform(:android)
fastlane_require 'dotenv'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

########################################################################
# Constants
########################################################################
ENV_FILE_NAME = '.pocketcastsandroid-env.default'
USER_ENV_FILE_PATH = File.join(Dir.home, ENV_FILE_NAME)
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
PROTOTYPE_BUILD_DOMAIN = 'https://cdn.a8c-ci.services'
APP_PACKAGE_NAME = 'au.com.shiftyjelly.pocketcasts'
GOOGLE_FIREBASE_SECRETS_PATH = File.join(PROJECT_ROOT_FOLDER, '.configure-files', 'firebase.secrets.json')
ORIGINALS_METADATA_DIR_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata')
RELEASE_NOTES_SOURCE_PATH = File.join(PROJECT_ROOT_FOLDER, 'CHANGELOG.md')
EXTRACTED_RELEASE_NOTES_PATH = File.join(ORIGINALS_METADATA_DIR_PATH, 'release_notes.txt')
PLAY_STORE_TRACK_AUTOMOTIVE_BETA = 'automotive:beta'
PLAY_STORE_TRACK_AUTOMOTIVE_PRODUCTION = 'automotive:production'
PLAY_STORE_TRACK_WEAR_BETA = 'wear:beta'
PLAY_STORE_TRACK_WEAR_PRODUCTION = 'wear:production'
PLAY_STORE_TRACK_BETA = 'beta'
PLAY_STORE_TRACK_PRODUCTION = 'production'
GLOTPRESS_APP_STRINGS_PROJECT_URL = 'https://translate.wordpress.com/projects/pocket-casts/android/'
VERSION_PROPERTIES_PATH = File.join(PROJECT_ROOT_FOLDER, 'version.properties')

# Instantiate versioning classes
VERSION_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SemanticVersionCalculator.new
VERSION_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::RCNotationVersionFormatter.new
BUILD_CODE_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeCalculator.new
BUILD_CODE_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeFormatter.new
VERSION_FILE = Fastlane::Wpmreleasetoolkit::Versioning::AndroidVersionFile.new(version_properties_path: VERSION_PROPERTIES_PATH)

SUPPORTED_LOCALES = [
  # There is an optional argument 'google_play' that can be used for release notes.
  # However, we don't translate them so we can skip it.
  { glotpress: 'ar', android: 'ar', promo_config: {} },
  { glotpress: 'ca', android: 'ca', promo_config: {} },
  { glotpress: 'de', android: 'de', promo_config: {} },
  { glotpress: 'es', android: 'es', promo_config: {} },
  { glotpress: 'es', android: 'es-rMX', promo_config: {} },
  { glotpress: 'en-gb', android: 'en-rGB', promo_config: {} },
  { glotpress: 'fr', android: 'fr', promo_config: {} },
  { glotpress: 'fr', android: 'fr-rCA', promo_config: {} },
  { glotpress: 'it', android: 'it',  promo_config: {} },
  { glotpress: 'ja', android: 'ja',  promo_config: {} },
  { glotpress: 'ko', android: 'ko',  promo_config: {} },
  { glotpress: 'nl', android: 'nl',  promo_config: {} },
  { glotpress: 'nb', android: 'nb',  promo_config: {} },
  { glotpress: 'pt-br', android: 'pt-rBR', promo_config: {} },
  { glotpress: 'ru', android: 'ru',  promo_config: {} },
  { glotpress: 'sv', android: 'sv',  promo_config: {} },
  { glotpress: 'zh-cn', android: 'zh', promo_config: {} },
  { glotpress: 'zh-tw', android: 'zh-rTW', promo_config: {} }
].freeze

########################################################################
# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
DEFAULT_BRANCH = 'main'
ENV['SUPPLY_UPLOAD_MAX_RETRIES'] = '5'
GITHUB_REPO = 'automattic/pocket-casts-android'
APPS_APP = 'app'
APPS_AUTOMOTIVE = 'automotive'
APPS_WEAR = 'wear'
APPS = [APPS_APP, APPS_AUTOMOTIVE, APPS_WEAR].freeze

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(PROJECT_ROOT_FOLDER, 'google-upload-credentials.json')
UPLOAD_TO_PLAY_STORE_COMMON_OPTIONS = {
  package_name: APP_PACKAGE_NAME,
  skip_upload_apk: true,
  skip_upload_metadata: true,
  skip_upload_changelogs: true,
  skip_upload_images: true,
  skip_upload_screenshots: true,
  json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
}.freeze

before_all do |_lane|
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    example_path = File.join(PROJECT_ROOT_FOLDER, 'fastlane/env/user.env-example')
    UI.user_error!("#{ENV_FILE_NAME} not found: Please copy '#{example_path}' to '#{USER_ENV_FILE_PATH}' and fill in the values.")
  end
end

platform :android do
  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  #
  lane :code_freeze do |skip_confirm: false|
    ensure_git_status_clean
    Fastlane::Helper::GitHelper.checkout_and_pull(DEFAULT_BRANCH)

    confirmation_message = <<-MESSAGE

      Code Freeze:
      • New release branch from #{DEFAULT_BRANCH}: release/#{release_version_next}
      • Current release version and build code: #{release_version_current} (#{build_code_current}).
      • New release version and build code: #{beta_version_code_freeze} (#{build_code_next}).

    MESSAGE

    UI.important(confirmation_message)
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    # Create the release branch
    UI.message('Creating release branch...')
    release_branch_name = "release/#{release_version_next}"
    Fastlane::Helper::GitHelper.create_branch(release_branch_name, from: DEFAULT_BRANCH)
    UI.success("Done! New release branch is: #{git_branch}")

    # Bump the version and build code
    UI.message('Bumping beta version and build code...')
    VERSION_FILE.write_version(
      version_name: beta_version_code_freeze,
      version_code: build_code_next
    )
    commit_version_bump
    UI.success("Done! New Beta Version: #{beta_version_current}. New Build Code: #{build_code_current}")

    new_version = release_version_current

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: RELEASE_NOTES_SOURCE_PATH,
      extracted_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH
    )
    android_update_release_notes(
      new_version: new_version,
      release_notes_file_path: RELEASE_NOTES_SOURCE_PATH
    )
    push_to_git_remote(set_upstream: true, tags: false)

    trigger_release_build(branch_to_build: release_branch_name)
    create_backmerge_pr

    # Copy the branch protection settings from the default branch to the new release branch
    copy_branch_protection(repository: GITHUB_REPO, from_branch: DEFAULT_BRANCH, to_branch: release_branch_name)
    # But allow admins to bypass restrictions, so that wpmobilebot can push to the release branch directly for beta version bumps
    set_branch_protection(repository: GITHUB_REPO, branch: release_branch_name, enforce_admins: false)

    begin
      # Move PRs to next milestone
      moved_prs = update_assigned_milestone(
        repository: GITHUB_REPO,
        from_milestone: new_version,
        to_milestone: release_version_next,
        comment: "Version `#{new_version}` has now entered code-freeze, so the milestone of this PR has been updated to `#{release_version_next}`."
      )
      UI.message("Moved the following PRs to milestone #{release_version_next}: #{moved_prs.join(', ')}")

      # Add ❄️ marker to milestone title to indicate we entered code-freeze
      set_milestone_frozen_marker(
        repository: GITHUB_REPO,
        milestone: new_version
      )
    rescue StandardError => e
      UI.error <<~MESSAGE
        Error moving PRs to next milestone or freezing the current `#{new_version}` milestone: #{e.message}.
        Please manually check that the PRs which were targeting milestone `#{new_version}` have been moved to the next one
        and that the milestone `#{new_version}` that just entered code-freeze had the "❄️" marker added to its title.
      MESSAGE
    end
  end

  # @param base_version [String] The "x.y" version number to create a beta from. Defaults to the current version as defined in the version file of `main` branch
  # @param version_code [Integer] The versionCode to use for the new beta. Defaults to one more than the versionCode defined in the version file of the `release/<base_version>` branch
  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  #
  lane :new_beta_release do |base_version: nil, version_code: nil, skip_confirm: false|
    ensure_git_status_clean

    if base_version.nil?
      # If no base_version provided, read it from the version file from `main`
      Fastlane::Helper::GitHelper.checkout_and_pull(DEFAULT_BRANCH)
      base_version = release_version_current
    end

    # Checkout release branch first, so that all computations of `beta_version_*`` and `build_code_*`` are based on the
    # current values in the current `release/*`` branch, not the values from `main` (which is important in cases like
    # hotfixes for example, where `main` doesn't have the new versionCode used by the hotfix yet but release/* branch do)
    checkout_success = Fastlane::Helper::GitHelper.checkout_and_pull(release: base_version)
    UI.user_error!("Release branch for version #{base_version} doesn't exist.") unless checkout_success

    # Check versions
    version_code ||= build_code_next # Only compute this version_code fallback _after_ the checkout of the release branch
    message = <<-MESSAGE

      Current beta version: #{beta_version_current}
      New beta version: #{beta_version_next}

      Current build code: #{build_code_current}
      New build code: #{version_code}

    MESSAGE

    UI.important(message)
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    # Bump the release version and build code
    UI.message('Bumping beta version and build code...')
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    VERSION_FILE.write_version(
      version_name: beta_version_next,
      version_code: version_code
    )
    commit_version_bump
    UI.success("Done! New Beta Version: #{beta_version_current}. New Build Code: #{build_code_current}")

    push_to_git_remote(tags: false)

    trigger_release_build(branch_to_build: "release/#{release_version_current}")
    create_backmerge_pr
  end

  # Sets the stage to start working on a hotfix
  #
  # - Cuts a new `release/x.y.z` branch from the tag from the latest (`x.y`) version
  # - Bumps the app version numbers appropriately
  #
  # @param version_name [String] The version name to use for the hotfix (`"x.y.z"`)
  # @param version_code [String] The version code to use for the hotfix (`"x.y.z"`)
  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  #
  # @note the version_code needs to be higher than any of the existing version_codes in Play Store
  #
  lane :new_hotfix_release do |version_name: nil, version_code: nil, skip_confirm: false|
    new_version = version_name || UI.input('Version number for the new hotfix?')
    new_version_code = version_code || UI.input('Version code for the new hotfix?')

    ensure_git_status_clean

    # Parse the provided version into an AppVersion object
    parsed_version = VERSION_FORMATTER.parse(new_version)
    previous_version = VERSION_FORMATTER.release_version(VERSION_CALCULATOR.previous_patch_version(version: parsed_version))

    # Check versions
    message = <<-MESSAGE

      New hotfix version: #{new_version}

      Current build code: #{build_code_current}
      New build code: #{new_version_code}

      Branching from tag: #{previous_version}

    MESSAGE

    UI.important(message)
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    # Check tags
    UI.user_error!("The version `#{new_version}` tag already exists!") if git_tag_exists(tag: new_version)
    UI.user_error!("Version #{previous_version} is not tagged! A hotfix branch cannot be created.") unless git_tag_exists(tag: previous_version)

    # Create the hotfix branch
    UI.message('Creating hotfix branch...')
    Fastlane::Helper::GitHelper.create_branch("release/#{new_version}", from: previous_version)
    UI.success("Done! New hotfix branch is: #{git_branch}")

    # Bump the hotfix version and build code and write it to the `version.properties` file
    UI.message('Bumping hotfix version and build code...')
    VERSION_FILE.write_version(
      version_name: new_version,
      version_code: new_version_code
    )
    commit_version_bump
    push_to_git_remote(set_upstream: true, tags: false)
    UI.success("Done! New Release Version: #{release_version_current}. New Build Code: #{build_code_current}")
  end

  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  #
  lane :finalize_hotfix_release do |skip_confirm: false|
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    ensure_git_status_clean

    version = release_version_current

    UI.important("Triggering hotfix build for version: #{version}")
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    trigger_release_build(branch_to_build: "release/#{version}")

    create_backmerge_pr
    begin
      close_milestone(repository: GITHUB_REPO, milestone: release_version_current)
    rescue StandardError => e
      UI.important("Could not find a GitHub milestone for hotfix #{release_version_current} to close: #{e}")
    end
  end

  # Update the rollout of all 3 variants/form-factors (app, automotive, wear) of the latest builds of the given Google Play track to the given % value
  #
  # @param percent [Float] The rollout percentage, between 0 and 1
  # @param track [String] The Google Play track for which to update the rollout of. Must be either `beta` or `production`.
  #
  lane :update_rollouts do |percent:, track:|
    UI.user_error!('percent parameter must be between 0.0 and 1.0') if percent.to_f.negative? || percent.to_f > 1
    UI.user_error!('track parameter must be either `beta` or `production`') unless %w[beta production].include?(track)

    is_beta = track == 'beta'
    # Use Google Play API to find the latest versionCode for the requested track
    prod_version_codes = google_play_track_version_codes(
      package_name: APP_PACKAGE_NAME,
      track: track,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )
    base_version_code = prod_version_codes.max # Use the latest (as there's likely to be 2: the previous one already at 100%, and the latest one with partial rollout)

    not_found_variants = []
    APPS.each do |app|
      variant_track = play_store_track(app: app, is_beta: is_beta)
      variant_version_code = version_code_for_app(app: app, version_code: base_version_code)
      upload_to_play_store(
        **UPLOAD_TO_PLAY_STORE_COMMON_OPTIONS,
        skip_upload_aab: true,
        track: variant_track,
        version_code: variant_version_code,
        release_status: percent.to_f < 1.0 ? 'inProgress' : 'completed',
        rollout: percent.to_s
      )
    rescue FastlaneCore::Interface::FastlaneError => e
      raise unless e.message =~ /Unable to find the requested release on track/

      not_found_variants << "'#{app}' variant with version code `#{variant_version_code}` was not found in `#{variant_track}` track in Google Play Console"
    end

    not_found_variants.each do |message|
      UI.important(message)
    end
    UI.user_error!('None of the 3 app variants were found in Google Play Console. We expected at least one') if not_found_variants.count == APPS.count
  end

  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  #
  lane :finalize_release do |skip_confirm: false|
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if release_is_hotfix?
    ensure_git_branch(branch: '^release/') # Match branch names that begin with `release/`
    ensure_git_status_clean

    UI.important("Finalizing release: #{release_version_current}")
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    configure_apply(force: is_ci)

    # Bump the release version and build code
    UI.message('Bumping final release version and build code...')
    VERSION_FILE.write_version(
      version_name: release_version_current,
      version_code: build_code_next
    )
    commit_version_bump
    UI.success("Done! New Release Version: #{release_version_current}. New Build Code: #{build_code_current}")

    # Download Localizations
    android_download_translations(
      res_dir: File.join('modules', 'services', 'localization', 'src', 'main', 'res'),
      glotpress_url: GLOTPRESS_APP_STRINGS_PROJECT_URL,
      locales: SUPPORTED_LOCALES,
      lint_task: 'aggregatedLintRelease'
    )

    version = release_version_current

    # Wrap up
    set_milestone_frozen_marker(repository: GITHUB_REPO, milestone: version, freeze: false)
    close_milestone(repository: GITHUB_REPO, milestone: version)

    push_to_git_remote(tags: false)
    trigger_release_build(branch_to_build: "release/#{version}")
    create_backmerge_pr
  end

  # This lane publishes a release on GitHub and creates a PR to backmerge the current release branch into the next release/ branch
  #
  # @param [Boolean] skip_confirm (default: false) If set, will skip the confirmation prompt before running the rest of the lane
  #
  lane :publish_release do |skip_confirm: false|
    ensure_git_status_clean
    ensure_git_branch(branch: '^release/')

    version_number = release_version_current

    current_branch = "release/#{version_number}"
    next_release_branch = "release/#{release_version_next}"

    UI.important <<~PROMPT
      Publish the #{version_number} release. This will:
      - Publish the existing draft `#{version_number}` release on GitHub
      - Which will also have GitHub create the associated git tag, pointing to the tip of the branch
      - If the release branch for the next version `#{next_release_branch}` already exists, backmerge `#{current_branch}` into it
      - If needed, backmerge `#{current_branch}` back into `#{DEFAULT_BRANCH}`
      - Delete the `#{current_branch}` branch
    PROMPT
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    UI.important "Publishing release #{version_number} on GitHub"

    publish_github_release(
      repository: GITHUB_REPO,
      name: version_number
    )

    # At this point, an intermediate branch has been created by creating a backmerge PR to a hotfix or the next version release branch.
    # This allows us to safely delete the `release/*` remote branch.
    remove_branch_protection(repository: GITHUB_REPO, branch: current_branch)
    Fastlane::Helper::GitHelper.delete_remote_branch_if_exists!(current_branch)
    Fastlane::Helper::GitHelper.checkout_and_pull(DEFAULT_BRANCH)
    Fastlane::Helper::GitHelper.delete_local_branch_if_exists!(current_branch)
  end

  # @param branch_to_build [String] The branch to build. Defaults to the current git branch.
  #
  lane :trigger_release_build do |branch_to_build: git_branch|
    pipeline_args = {
      pipeline_file: 'release-builds.yml',
      environment: {
        RELEASE_VERSION: release_version_current
      }
    }
    if is_ci?
      buildkite_pipeline_upload(**pipeline_args)
    else
      buildkite_trigger_build(
        buildkite_organization: 'automattic',
        buildkite_pipeline: 'pocket-casts-android',
        branch: branch_to_build,
        **pipeline_args
      )
    end
  end

  # Builds and uploads a new build to Google Play (without releasing it)
  #
  # - Uses the current version to decide if this is a beta or production build
  # - Builds the apps for external distribution
  # - Uploads the builds to 'beta' or 'production' Play Store channel (but does not release it)
  # - Creates draft Github release
  #
  # @param skip_confirm [Boolean] If true, avoids any interactive prompt
  # @param skip_prechecks [Boolean] If true, skips android_build_preflight
  # @param create_gh_release [Boolean] If true, creates a draft GitHub release
  #
  lane :build_and_upload_to_play_store do |skip_prechecks: false, skip_confirm: false, create_gh_release: false|
    version = version_name_current
    build_code = build_code_current
    is_beta = beta_version?(version)
    unless skip_prechecks
      # Match branch names that begin with `release/`
      # Skip this check on CI because that action relies on CI env vars, but when this lane is called as part of `code_freeze` the branch changed since the CI build started, so that wouldn't work
      ensure_git_branch(branch: '^release/') unless is_ci

      UI.important("Building version #{version_name_current} (#{build_code_current}) for upload to Google Play Console")
      UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

      # Check local repo status
      ensure_git_status_clean unless is_ci

      android_build_preflight
    end

    release_assets = []

    APPS.each do |app|
      build_bundle(app: app, version: version, build_code: build_code)

      aab_artifact_path = aab_artifact_path(app, version)
      UI.error("Unable to find a build artifact at #{aab_artifact_path}") unless File.exist? aab_artifact_path

      track = play_store_track(app: app, is_beta: is_beta)
      upload_to_play_store(
        **UPLOAD_TO_PLAY_STORE_COMMON_OPTIONS,
        aab: aab_artifact_path,
        track: track,
        release_status: 'draft'
      )
      release_assets << aab_artifact_path

      signed_apk_artifact_path = signed_apk_artifact_path(app, version)
      download_universal_apk_from_google_play(
        package_name: APP_PACKAGE_NAME,
        version_code: version_code_for_app(app: app, version_code: build_code),
        destination: signed_apk_artifact_path,
        json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
      )
      release_assets << signed_apk_artifact_path
    end

    create_gh_release(version: version, prerelease: is_beta, release_assets: release_assets.compact) if create_gh_release
  end

  # Builds and bundles the given app
  #
  # @param version [String] The version to create
  # @param build_code [String] The build code to create
  # @param app [String] The Android app to build (i.e 'app', 'automotive', or 'wear')
  lane :build_bundle do |version:, build_code:, app:|
    aab_artifact_path = aab_artifact_path(app, version)
    build_dir = 'artifacts/'

    gradle(task: 'clean')
    UI.message('Running lint...')
    gradle(task: ":#{app}:lintRelease")
    UI.message("Building #{version} / #{build_code} - #{aab_artifact_path}...")
    gradle(
      task: ":#{app}:bundle",
      build_type: 'Release',
      properties: {
        'IS_AUTOMOTIVE_BUILD' => app == APPS_AUTOMOTIVE,
        'IS_WEAR_BUILD' => app == APPS_WEAR
      }
    )

    Dir.chdir('..') do
      sh("mkdir -p #{build_dir} && cp -v #{bundle_output_path(app)} #{aab_artifact_path}")
      UI.message("Bundle ready: #{aab_artifact_path}")
    end
  end

  # Build the application and instrumented tests, then run the tests in Firebase Test Lab
  #
  lane :build_and_instrumented_test do
    gradle(tasks: %w[assembleDebug assembleDebugAndroidTest])

    # Run the instrumented tests in Firebase Test Lab
    firebase_login(
      key_file: GOOGLE_FIREBASE_SECRETS_PATH
    )

    apk_dir = File.join(PROJECT_ROOT_FOLDER, 'app', 'build', 'outputs', 'apk')

    android_firebase_test(
      project_id: firebase_secret(name: 'project_id'),
      key_file: GOOGLE_FIREBASE_SECRETS_PATH,
      model: 'Pixel2.arm',
      version: 30,
      test_apk_path: File.join(apk_dir, 'androidTest', 'debug', 'app-debug-androidTest.apk'),
      apk_path: File.join(apk_dir, 'debug', 'app-debug.apk'),
      results_output_dir: File.join(PROJECT_ROOT_FOLDER, 'build', 'instrumented-tests')
    )
  end

  # Builds a prototype build and uploads it to S3
  #
  lane :build_and_upload_prototype_build do
    UI.user_error!("'BUILDKITE_ARTIFACTS_S3_BUCKET' must be defined as an environment variable.") unless ENV['BUILDKITE_ARTIFACTS_S3_BUCKET']

    comment_on_pr(
      project: 'automattic/pocket-casts-android',
      pr_number: Integer(ENV.fetch('BUILDKITE_PULL_REQUEST', nil)),
      reuse_identifier: 'app-prototype-build-link',
      body: '🚧 Prototype builds will be available soon'
    )

    prototype_build_type = 'debugProd'

    gradle(
      task: 'assemble',
      build_type: prototype_build_type,
      properties: {
        'skipSentryProguardMappingUpload' => true
      }
    )

    prototype_build_comments = lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS].map do |apk_path|
      upload_path = upload_to_s3(
        bucket: 'a8c-apps-public-artifacts',
        key: "pocketcasts-#{get_app_key(apk_path: apk_path)}-prototype-build-#{generate_prototype_build_number}.apk",
        file: apk_path,
        skip_if_exists: true
      )

      install_url = "#{PROTOTYPE_BUILD_DOMAIN}/#{upload_path}"

      prototype_build_details_comment(
        app_display_name: get_app_display_name(apk_path: apk_path),
        download_url: install_url,
        metadata: {
          'Build Type': prototype_build_type
        },
        fold: true
      )
    end

    comment_on_pr(
      project: 'automattic/pocket-casts-android',
      pr_number: Integer(ENV.fetch('BUILDKITE_PULL_REQUEST', nil)),
      reuse_identifier: 'app-prototype-build-link',
      body: prototype_build_comments.join
    )
  end

  def get_app_key(apk_path:)
    File.basename(apk_path).split('-').first
  end

  def get_app_display_name(apk_path:)
    key = get_app_key(apk_path: apk_path).to_sym
    { app: '📱 Mobile', wear: '⌚ Wear', automotive: '🚗 Automotive' }.fetch(key, '❔ Unknown')
  end

  # This function is Buildkite-specific
  def generate_prototype_build_number
    if ENV['BUILDKITE']
      commit = ENV.fetch('BUILDKITE_COMMIT', nil)[0, 7]
      branch = ENV['BUILDKITE_BRANCH'].parameterize
      pr_num = ENV.fetch('BUILDKITE_PULL_REQUEST', nil)

      pr_num == 'false' ? "#{branch}-#{commit}" : "pr#{pr_num}-#{commit}"
    else
      repo = Git.open(PROJECT_ROOT_FOLDER)
      commit = repo.current_branch.parameterize
      branch = repo.revparse('HEAD')[0, 7]

      "#{branch}-#{commit}"
    end
  end

  #####################################################################################
  # Private lanes
  #####################################################################################

  # Creates a new GitHub Release for the given version
  #
  # @param version [Hash<String>] The version to create. Expects keys "name" and "code"
  # @param prerelease [Bool] If true, the GitHub Release will have the prerelease flag
  #
  private_lane :create_gh_release do |version:, prerelease: false, release_assets: []|
    create_github_release(
      repository: GITHUB_REPO,
      version: version,
      release_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH,
      prerelease: prerelease,
      is_draft: !prerelease,
      release_assets: release_assets.join(',')
    )
  end

  lane :create_backmerge_pr do |version: release_version_current|
    create_release_backmerge_pull_request(
      repository: GITHUB_REPO,
      source_branch: "release/#{version}",
      default_branch: DEFAULT_BRANCH,
      labels: ['Releases'],
      milestone_title: release_version_next
    )
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def aab_artifact_path(app, version)
    File.join(PROJECT_ROOT_FOLDER, 'artifacts', "#{app}-#{version}.aab")
  end

  def signed_apk_artifact_path(app, version)
    File.join(PROJECT_ROOT_FOLDER, 'artifacts', "#{app}-#{version}.apk")
  end

  def bundle_output_path(app)
    "#{app}/build/outputs/bundle/release/#{app}-release.aab"
  end

  def firebase_secret(name:)
    UI.user_error!('Unable to locale Firebase Secrets File – did you run `bundle exec fastlane run configure_apply`?') unless File.file? GOOGLE_FIREBASE_SECRETS_PATH
    key_file_secrets = JSON.parse(File.read(GOOGLE_FIREBASE_SECRETS_PATH))
    UI.user_error!("Unable to find key `#{name}` in #{GOOGLE_FIREBASE_SECRETS_PATH}") if key_file_secrets[name].nil?
    key_file_secrets[name]
  end

  def beta_version?(version)
    version.include? '-rc-'
  end

  #####################################################################################
  # Version Methods
  #####################################################################################

  def release_is_hotfix?
    # Read the current release version from the .xcconfig file and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate and return whether the release version is a hotfix
    VERSION_CALCULATOR.release_is_hotfix?(version: current_version)
  end

  def commit_version_bump
    Fastlane::Helper::GitHelper.commit(
      message: 'Bump version number',
      files: VERSION_PROPERTIES_PATH
    )
  end

  # Returns the current version name from `version.properties` without needing formatting or calculations
  def version_name_current
    VERSION_FILE.read_version_name
  end

  # Returns the release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
  #
  def release_version_current
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Return the formatted release version
    VERSION_FORMATTER.release_version(current_version)
  end

  #  Returns the next release version of the app in the format `1.2` or `1.2.3` if it is a hotfix
  #
  def release_version_next
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next release version
    release_version_next = VERSION_CALCULATOR.next_release_version(version: current_version)
    # Return the formatted release version
    VERSION_FORMATTER.release_version(release_version_next)
  end

  # Returns the beta version of the app in the format `1.2-rc-1`
  #
  def beta_version_current
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(current_version)
  end

  # Returns the beta version that is used by the code freeze
  # It first increments the minor number, which also resets the build number to 0
  # It then bumps the build number so the -rc-1 can be appended to the code freeze version
  def beta_version_code_freeze
    # Read the current release version from the version.properties file and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next major version number
    next_version = VERSION_CALCULATOR.next_release_version(version: current_version)
    # Calculate the next build number
    beta_version_code_freeze = VERSION_CALCULATOR.next_build_number(version: next_version)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(beta_version_code_freeze)
  end

  # Returns the beta version of the app in the format `1.2-rc-1`
  #
  def beta_version_next
    # Read the current release version from `version.properties` and parse it into an AppVersion object
    current_version = VERSION_FORMATTER.parse(version_name_current)
    # Calculate the next beta version
    beta_version_next = VERSION_CALCULATOR.next_build_number(version: current_version)
    # Return the formatted release version
    VERSION_FORMATTER.beta_version(beta_version_next)
  end

  # Returns the current build code of the app
  #
  def build_code_current
    # Read the current build code from `version.properties` into to a BuildCode object
    build_code_current = VERSION_FILE.read_version_code
    # Return the formatted build code
    BUILD_CODE_FORMATTER.build_code(build_code: build_code_current)
  end

  # Returns the next build code of the app
  #
  def build_code_next
    # Read the current build code from `version.properties` into to a BuildCode object
    build_code_current = VERSION_FILE.read_version_code
    # Calculate the next build code
    build_code_next = BUILD_CODE_CALCULATOR.next_build_code(build_code: build_code_current)
    # Return the formatted build code
    BUILD_CODE_FORMATTER.build_code(build_code: build_code_next)
  end

  # Returns the versionCode for a given app, adjusting for offset depending if it's the mobile, automotive or wear app
  #
  # See also `dependencies.gradle.kts` and its `versionCodeDifferenceBetweenAppAnd*` constants where those offsets are defined
  #
  def version_code_for_app(app:, version_code:)
    case app
    when APPS_AUTOMOTIVE
      (version_code.to_i + 50_000).to_s
    when APPS_WEAR
      (version_code.to_i + 100_000).to_s
    else
      version_code
    end
  end

  # Returns the Play Store track for a given app, for Open Testing or Production
  #
  # @param app [String] The type of app. One of `APPS_APP`, `APPS_AUTOMOTIVE`, `APPS_WEAR`
  # @param is_beta [Boolean] If we want the track for Open Testing. Otherwise, returns the track for Production
  # @return [String] The Play Store track to use in the `upload_to_play_store(track: …)` action call
  #
  def play_store_track(app:, is_beta:)
    case app
    when APPS_AUTOMOTIVE
      is_beta ? PLAY_STORE_TRACK_AUTOMOTIVE_BETA : PLAY_STORE_TRACK_AUTOMOTIVE_PRODUCTION
    when APPS_WEAR
      is_beta ? PLAY_STORE_TRACK_WEAR_BETA : PLAY_STORE_TRACK_WEAR_PRODUCTION
    else
      is_beta ? PLAY_STORE_TRACK_BETA : PLAY_STORE_TRACK_PRODUCTION
    end
  end
end
